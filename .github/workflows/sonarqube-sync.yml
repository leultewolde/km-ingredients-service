name: Sync SonarQube Issues to GitHub

on:
  schedule:
    - cron: '0 3 * * *'  # daily at 3 AM UTC
  workflow_dispatch:

jobs:
  sync-sonarqube-issues:
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST: ${{ secrets.SONAR_HOST }}
      PROJECT_KEY: hidmo-km-ingredients-service
      GH_TOKEN: ${{ secrets.GH_PAT }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Fetch and create issues
        run: |
          echo "Fetching existing SonarQube-related GitHub issues..."
          EXISTING_KEYS=$(gh issue list --label "sonarqube" --limit 100 --json body --jq '.[].body' | grep -o 'sonar-key:[^ ]*' | cut -d':' -f2)

          echo "Querying unresolved issues from SonarQube..."
          curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/issues/search?componentKeys=$PROJECT_KEY&resolved=false" |
          jq -c '.issues[]' | while read -r issue; do
            KEY=$(echo "$issue" | jq -r '.key')
            if echo "$EXISTING_KEYS" | grep -q "$KEY"; then
              echo "Issue for SonarQube key $KEY already exists. Skipping."
              continue
            fi
          
            TITLE=$(echo "$issue" | jq -r '.message')
            RULE=$(echo "$issue" | jq -r '.rule')
            FILE=$(echo "$issue" | jq -r '.component')
            LINE=$(echo "$issue" | jq -r '.line')
          
            ISSUE_BODY="**Rule**: $RULE  
            **File**: $FILE
            **Line**: $LINE
            **Key**: $KEY
            <!-- sonar-key:$KEY -->"
          
            echo "Creating GitHub issue for $KEY"
            gh issue create --title "$TITLE" --body "$ISSUE_BODY" --label "sonarqube"
          done
