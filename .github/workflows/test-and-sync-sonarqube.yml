name: Test, Analyze, and Create GitHub Issues from SonarQube

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  IMAGE_NAME: ivtheforth/km-ingredients-service
  IMAGE_TAG: ${{ github.sha }}
  IMAGE_TAG_TIMESTAMP: ${{ github.run_id }}-${{ github.run_number }}-${{ github.sha }}
  REGISTRY: docker.io

jobs:
  test-and-sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Grant execute permission to Gradle
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Run SonarQube analysis
        run: |
          ./gradlew sonar \
            -Dsonar.host.url=https://sonar.leultewolde.com \
            -Dsonar.projectKey=hidmo-km-ingredients-service \
            -Dsonar.projectName='Hidmo KM Ingredients Service' \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Wait for SonarQube Quality Gate
        run: |
          SONAR_HOST="https://sonar.leultewolde.com"
          
          # Extract the analysis task ID from report-task.txt
          TASK_ID=$(cat build/sonar/report-task.txt | grep ceTaskId | cut -d= -f2)
          
          echo "Waiting for SonarQube quality gate result for task $TASK_ID"
          
          # Poll SonarQube until the analysis is complete
          STATUS="PENDING"
          for i in {1..30}; do
            sleep 5
            STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "$SONAR_HOST/api/ce/task?id=$TASK_ID" | jq -r '.task.status')
            if [ "$STATUS" = "SUCCESS" ]; then
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "SonarQube analysis failed."
              exit 1
            fi
          done
          
          # Now check the quality gate status
          ANALYSIS_ID=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "$SONAR_HOST/api/ce/task?id=$TASK_ID" | jq -r '.task.analysisId')
          QG_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "$SONAR_HOST/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | jq -r '.projectStatus.status')
          
          echo "Quality Gate status: $QG_STATUS"
          if [ "$QG_STATUS" != "OK" ]; then
            echo "Quality Gate failed. Failing pipeline."
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  create-github-issues:
    runs-on: ubuntu-latest
    needs: test-and-sonar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI and jq
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Create GitHub Issues from SonarQube
        run: |
          SONAR_HOST="https://sonar.leultewolde.com"
          PROJECT_KEY="hidmo-km-ingredients-service"
          
          echo "Fetching existing SonarQube-related GitHub issues..."
          EXISTING_KEYS=$(gh issue list --label "sonarqube" --limit 100 --json body --jq '.[].body' | grep -o 'sonar-key:[^ ]*' | cut -d':' -f2)
          
          echo "Querying unresolved issues from SonarQube..."
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" "$SONAR_HOST/api/issues/search?componentKeys=$PROJECT_KEY&resolved=false" |
          jq -c '.issues[]' | while read -r issue; do
            KEY=$(echo "$issue" | jq -r '.key')
            if echo "$EXISTING_KEYS" | grep -q "$KEY"; then
              echo "Issue for SonarQube key $KEY already exists. Skipping."
              continue
            fi
          
            TITLE=$(echo "$issue" | jq -r '.message')
            RULE=$(echo "$issue" | jq -r '.rule')
            FILE=$(echo "$issue" | jq -r '.component')
            LINE=$(echo "$issue" | jq -r '.line')
          
            ISSUE_BODY="**Rule**: $RULE  
            **File**: $FILE
            **Line**: $LINE
            **Key**: $KEY
            <!-- sonar-key:$KEY -->"
          
            echo "Creating GitHub issue for $KEY"
            gh issue create --title "$TITLE" --body "$ISSUE_BODY" --label "sonarqube"
          done
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

  docker-deploy:
    runs-on: ubuntu-latest
    needs: test-and-sonar
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_TIMESTAMP }}

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: latest

      - name: Deploy to Kubernetes
        run: |
          kubectl rollout restart deployment km-ingredients-service -n lwt-api