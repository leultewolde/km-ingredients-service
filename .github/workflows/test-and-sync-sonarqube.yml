name: Test, Analyze, and Create GitHub Issues from SonarQube

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test-and-sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Grant execute permission to Gradle
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Run SonarQube analysis
        run: |
          ./gradlew sonar \
            -Dsonar.host.url=https://sonar.leultewolde.com \
            -Dsonar.projectKey=hidmo-km-ingredients-service \
            -Dsonar.projectName='Hidmo KM Ingredients Service' \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  create-github-issues:
    runs-on: ubuntu-latest
    needs: test-and-sonar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI and jq
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Create GitHub Issues from SonarQube
        run: |
          SONAR_HOST="https://sonar.leultewolde.com"
          PROJECT_KEY="hidmo-km-ingredients-service"
          
          echo "Fetching existing SonarQube-related GitHub issues..."
          EXISTING_KEYS=$(gh issue list --label "sonarqube" --limit 100 --json body --jq '.[].body' | grep -o 'sonar-key:[^ ]*' | cut -d':' -f2)
          
          echo "Querying unresolved issues from SonarQube..."
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" "$SONAR_HOST/api/issues/search?componentKeys=$PROJECT_KEY&resolved=false" |
          jq -c '.issues[]' | while read -r issue; do
            KEY=$(echo "$issue" | jq -r '.key')
            if echo "$EXISTING_KEYS" | grep -q "$KEY"; then
              echo "Issue for SonarQube key $KEY already exists. Skipping."
              continue
            fi
          
            TITLE=$(echo "$issue" | jq -r '.message')
            RULE=$(echo "$issue" | jq -r '.rule')
            FILE=$(echo "$issue" | jq -r '.component')
            LINE=$(echo "$issue" | jq -r '.line')
          
            ISSUE_BODY="**Rule**: $RULE  
            **File**: $FILE
            **Line**: $LINE
            **Key**: $KEY
            <!-- sonar-key:$KEY -->"
          
            echo "Creating GitHub issue for $KEY"
            gh issue create --title "$TITLE" --body "$ISSUE_BODY" --label "sonarqube"
          done
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}